import React, { useState } from "react";
import {
  Container,
  TextField,
  IconButton,
  Box,
  Typography,
  Paper,
  Drawer,
  Button,
  List,
  ListItem,
  ListItemText,
  createTheme,
  ThemeProvider,
  CssBaseline,
  CircularProgress,
} from "@mui/material";
import SendIcon from "@mui/icons-material/Send";
import UploadFileIcon from "@mui/icons-material/UploadFile";
import Brightness4Icon from "@mui/icons-material/Brightness4";
import Brightness7Icon from "@mui/icons-material/Brightness7";
import ThumbUpIcon from "@mui/icons-material/ThumbUp";
import ThumbDownIcon from "@mui/icons-material/ThumbDown";
import ContentCopyIcon from "@mui/icons-material/ContentCopy";
import ReactMarkdown from "react-markdown"; // Import react-markdown

const Chatbot = () => {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");
  const [document, setDocument] = useState(null);
  const [userHistory, setUserHistory] = useState([]);
  const [darkMode, setDarkMode] = useState(true);
  const [botAnswer, setBotAnswer] = useState("");
  const [isBotProcessing, setIsBotProcessing] = useState(false);

  const theme = createTheme({
    palette: {
      mode: darkMode ? "dark" : "light",
      background: {
        default: darkMode ? "#222224" : "#fff",
        paper: darkMode ? "#111112" : "#fff",
      },
      text: {
        primary: darkMode ? "#fafcff" : "#000",
      },
    },
    components: {
      MuiButton: {
        styleOverrides: {
          root: {
            borderRadius: "20px",
            padding: "8px 16px",
            textTransform: "none",
            boxShadow: "none",
            transition: "background-color 0.3s ease",
            "&:hover": {
              boxShadow: "none",
            },
          },
          outlined: {
            border: "2px solid",
          },
          contained: {
            color: "white",
          },
        },
      },
    },
  });

  const handleSendMessage = async () => {
    if (input.trim() === "") return;

    const userMessage = {
      text: input,
      sender: "user",
      timestamp: new Date().toLocaleTimeString(),
    };
    setMessages([...messages, userMessage]);
    setUserHistory([...userHistory, input]);
    setInput("");

    setIsBotProcessing(true);

    try {
      const response = await fetch("http://localhost:8080/chat", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ question: input, use_user_file: !!document }),
      });

      if (!response.ok) {
        throw new Error("Failed to fetch response from the server");
      }

      const data = await response.json();
      const botMessage = {
        text: data.response,
        sender: "bot",
        timestamp: new Date().toLocaleTimeString(),
      };
      setMessages((prevMessages) => [...prevMessages, botMessage]);
      setBotAnswer(data.response);
    } catch (error) {
      console.error("Error:", error);
      const botMessage = {
        text: "Sorry, something went wrong. Please try again.",
        sender: "bot",
        timestamp: new Date().toLocaleTimeString(),
      };
      setMessages((prevMessages) => [...prevMessages, botMessage]);
      setBotAnswer("Sorry, something went wrong. Please try again.");
    } finally {
      setIsBotProcessing(false);
    }
  };

  const handleClearChat = () => {
    setMessages([]);
    setUserHistory([]);
    setBotAnswer("");
  };

  const handleDocumentUpload = async (event) => {
    const file = event.target.files[0];
    if (file) {
      const formData = new FormData();
      formData.append("file", file);

      try {
        const response = await fetch("http://localhost:8080/upload", {
          method: "POST",
          body: formData,
        });

        if (!response.ok) {
          throw new Error("Failed to upload file");
        }

        setDocument(file);
        alert(`Document "${file.name}" uploaded and processed successfully!`);
      } catch (error) {
        console.error("Error:", error);
        alert("Failed to upload file. Please try again.");
      }
    }
  };

  const handleCopyMessage = (text) => {
    navigator.clipboard.writeText(text).then(() => {
      alert("Message copied to clipboard!");
    });
  };

  return (
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <Container
        maxWidth="lg"
        sx={{
          display: "flex",
          flexDirection: "row",
          height: "100vh",
          overflow: "hidden",
          backgroundColor: theme.palette.background.default,
        }}
      >
        <Drawer
          variant="permanent"
          open
          sx={{
            width: 300,
            flexShrink: 0,
            "& .MuiDrawer-paper": {
              width: 300,
              boxSizing: "border-box",
              backgroundColor: theme.palette.background.paper,
              color: theme.palette.text.primary,
              p: 2,
              display: "flex",
              flexDirection: "column",
              borderRight: `1px solid ${darkMode ? "#333" : "#ddd"}`,
              boxShadow: "0 4px 12px rgba(0,0,0,0.2)",
            },
          }}
        >
          <Typography
            variant="h5"
            sx={{
              mb: 5,
              fontWeight: "bold",
              textAlign: "center",
              color: theme.palette.text.primary,
              position: "relative",
              fontFamily: "'Pacifico', cursive",
              "&::after": {
                content: '""',
                position: "absolute",
                left: "50%",
                bottom: "-5px",
                width: "100%",
                height: "3px",
                backgroundColor: theme.palette.primary.main,
                transform: "translateX(-50%)",
              },
            }}
          >
            Edubridge AI
          </Typography>

          <Button
            variant="outlined"
            onClick={handleClearChat}
            sx={{
              mb: 2,
              width: "100%",
              color: theme.palette.text.primary,
              border: "none",
              backgroundColor:
                theme.palette.background.paper === "#1E293B" ? "#334155" : "#969899",
              "&:hover": {
                backgroundColor:
                  theme.palette.background.paper === "#1E293B" ? "#475569" : "#6495ED",
                color: "white",
              },
            }}
          >
            Clear Chat
          </Button>

          <Button
            variant="outlined"
            component="label"
            startIcon={<UploadFileIcon />}
            sx={{
              mb: 2,
              width: "100%",
              color: theme.palette.text.primary,
              border: "none",
              backgroundColor:
                theme.palette.background.paper === "#1E293B" ? "#334155" : "#969899",
              "&:hover": {
                backgroundColor:
                  theme.palette.background.paper === "#1E293B" ? "#475569" : "#6495ED",
                color: "white",
              },
            }}
          >
            Upload Document
            <input type="file" hidden onChange={handleDocumentUpload} />
          </Button>

          <Typography variant="h6" sx={{ mb: 2, color: theme.palette.text.primary }}>
            Chat History :
          </Typography>
          <List sx={{ maxHeight: 200, overflowY: "auto" }}>
            {userHistory.map((msg, index) => (
              <ListItem
                key={index}
                sx={{
                  backgroundColor: theme.palette.background.paper,
                  borderRadius: "15px",
                  marginBottom: "8px",
                  padding: "8px",
                  "&:hover": {
                    backgroundColor:
                      theme.palette.background.paper === "#1E293B" ? "#2d3136" : "#757d80",
                    color: theme.palette.text.primary,
                    cursor: "pointer",
                  },
                }}
              >
                <ListItemText
                  primary={`User: ${msg}`}
                  sx={{ color: theme.palette.text.primary }}
                />
              </ListItem>
            ))}
          </List>
        </Drawer>

        <Box
          sx={{
            display: "flex",
            flexDirection: "column",
            justifyContent: "flex-end",
            flexGrow: 1,
            overflowY: "hidden",
          }}
        >
          <Paper
            elevation={0}
            sx={{
              flexGrow: 1,
              overflowY: "auto",
              p: 2,
              mb: 2,
              height: "80%",
              backgroundColor: "transparent",
              boxShadow: "none",
              border: "none",
              "&::-webkit-scrollbar": {
                width: "8px",
              },
              "&::-webkit-scrollbar-track": {
                backgroundColor: darkMode ? "#333" : "#f1f1f1",
                borderRadius: "4px",
              },
              "&::-webkit-scrollbar-thumb": {
                backgroundColor: darkMode ? "#666" : "#888",
                borderRadius: "4px",
                "&:hover": {
                  backgroundColor: darkMode ? "#888" : "#666",
                },
              },
            }}
          >
            {messages.length === 0 ? (
              <Box
                sx={{
                  display: "flex",
                  justifyContent: "center",
                  alignItems: "center",
                  height: "100%",
                  color: theme.palette.text.secondary,
                }}
              >
                <Typography variant="h4">How can I assist you?</Typography>
              </Box>
            ) : (
              messages.map((msg, index) => (
                <Box
                  key={index}
                  sx={{
                    textAlign: msg.sender === "user" ? "right" : "left",
                    mb: 2,
                    display: "flex",
                    justifyContent: msg.sender === "user" ? "flex-end" : "flex-start",
                    animation: "fadeIn 0.5s ease",
                    "@keyframes fadeIn": {
                      from: { opacity: 0, transform: "translateY(10px)" },
                      to: { opacity: 1, transform: "translateY(0)" },
                    },
                  }}
                >
                  <Box
                    sx={{
                      display: "flex",
                      flexDirection: "column",
                      alignItems: msg.sender === "user" ? "flex-end" : "flex-start",
                      maxWidth: "75%",
                    }}
                  >
                    <Typography
                      variant="caption"
                      sx={{
                        color: theme.palette.text.secondary,
                        mb: 0.5,
                      }}
                    >
                      {msg.sender === "user" ? "You" : "Bot"} • {msg.timestamp}
                    </Typography>
                    <Box
                      sx={{
                        p: 1.5,
                        borderRadius: "15px",
                        bgcolor:
                          msg.sender === "user"
                            ? "primary.main"
                            : darkMode
                            ? "grey.800"
                            : "grey.200",
                        color: msg.sender === "user" ? "black" : theme.palette.text.primary,
                        boxShadow: "0 2px 8px rgba(0, 0, 0, 0.12)",
                        transition: "transform 0.2s ease, box-shadow 0.2s ease",
                        "&:hover": {
                          transform: "scale(1.02)",
                          boxShadow: "0 4px 12px rgba(0,0,0,0.2)",
                        },
                      }}
                    >
                      {msg.sender === "bot" ? (
                        <ReactMarkdown>{msg.text}</ReactMarkdown> // Use ReactMarkdown here
                      ) : (
                        <Typography variant="body1" sx={{ wordBreak: "break-word" }}>
                          {msg.text}
                        </Typography>
                      )}
                      {msg.sender === "bot" && (
                        <Box
                          sx={{
                            display: "flex",
                            justifyContent: "flex-end",
                            gap: 1,
                            mt: 1,
                          }}
                        >
                          <IconButton size="small" onClick={() => alert("Liked!")}>
                            <ThumbUpIcon fontSize="small" />
                          </IconButton>
                          <IconButton size="small" onClick={() => alert("Disliked!")}>
                            <ThumbDownIcon fontSize="small" />
                          </IconButton>
                          <IconButton size="small" onClick={() => handleCopyMessage(msg.text)}>
                            <ContentCopyIcon fontSize="small" />
                          </IconButton>
                        </Box>
                      )}
                    </Box>
                  </Box>
                </Box>
              ))
            )}

            {isBotProcessing && (
              <Box
                sx={{
                  textAlign: "left",
                  mb: 2,
                  display: "flex",
                  justifyContent: "flex-start",
                }}
              >
                <Box
                  sx={{
                    display: "flex",
                    flexDirection: "column",
                    alignItems: "flex-start",
                    maxWidth: "75%",
                  }}
                >
                  <Typography
                    variant="caption"
                    sx={{
                      color: theme.palette.text.secondary,
                      mb: 0.5,
                    }}
                  >
                    Bot • Typing...
                  </Typography>
                  <Box
                    sx={{
                      p: 1.5,
                      borderRadius: "15px",
                      bgcolor: darkMode ? "grey.800" : "grey.200",
                      color: theme.palette.text.primary,
                      boxShadow: "0 2px 8px rgba(0, 0, 0, 0.12)",
                    }}
                  >
                    <CircularProgress size={20} />
                  </Box>
                </Box>
              </Box>
            )}
          </Paper>

          <Box
            sx={{
              display: "flex",
              justifyContent: "center",
              paddingBottom: 2,
              marginTop: "auto",
              width: "100%",
            }}
          >
            <TextField
              fullWidth
              variant="outlined"
              placeholder="Type a message..."
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyPress={(e) => e.key === "Enter" && handleSendMessage()}
              sx={{
                width: "80%",
                maxWidth: 600,
                borderRadius: "30px",
                background: `linear-gradient(145deg, ${darkMode ? "#2a2a2e" : "#f0f0f0"}, ${theme.palette.background.paper})`,
                "& .MuiOutlinedInput-root": {
                  borderRadius: "30px",
                  color: theme.palette.text.primary,
                  transition: "all 0.3s ease",
                  "&:hover .MuiOutlinedInput-notchedOutline": {
                    borderColor: darkMode ? "#555" : "#004085",
                  },
                  "&.Mui-focused .MuiOutlinedInput-notchedOutline": {
                    borderColor: darkMode ? "#777" : "#004085",
                    boxShadow: darkMode
                      ? "0 0 0 2px rgba(255, 255, 255, 0.1)"
                      : "0 0 0 2px rgba(0, 64, 133, 0.2)",
                  },
                },
                "& .MuiOutlinedInput-input": {
                  padding: "12px 16px",
                  color: theme.palette.text.primary,
                  "&::placeholder": {
                    color: darkMode ? "#aaa" : "#666",
                    opacity: 1,
                  },
                },
                "& .MuiOutlinedInput-notchedOutline": {
                  borderColor: darkMode ? "#444" : "#ddd",
                  transition: "border-color 0.3s ease, box-shadow 0.3s ease",
                },
              }}
            />
            <IconButton
              color="primary"
              onClick={handleSendMessage}
              sx={{
                marginLeft: 2,
                backgroundColor: "#004085",
                borderRadius: "50%",
                "&:hover": {
                  backgroundColor: "#003b64",
                },
              }}
            >
              <SendIcon />
            </IconButton>
          </Box>
        </Box>

        <IconButton
          sx={{
            position: "fixed",
            top: 20,
            right: 20,
            color: theme.palette.text.primary,
            backgroundColor: darkMode ? "#334155" : "#ADD8E6",
            ":hover": {
              backgroundColor: darkMode ? "#475569" : "#6495ED",
              color: "white",
            },
          }}
          onClick={() => setDarkMode(!darkMode)}
        >
          {darkMode ? <Brightness7Icon /> : <Brightness4Icon />}
        </IconButton>
      </Container>
    </ThemeProvider>
  );
};

export default Chatbot;




backend 





from flask import Flask, request, jsonify
from flask_cors import CORS
from langchain_community.document_loaders import PyPDFLoader, DirectoryLoader
from langchain_text_splitters import RecursiveCharacterTextSplitter
from langchain_community.vectorstores import FAISS
from langchain_ollama import OllamaEmbeddings
from langchain_ollama.chat_models import ChatOllama
from langchain.prompts import ChatPromptTemplate, PromptTemplate
from langchain.retrievers.multi_query import MultiQueryRetriever
from langchain_core.runnables import RunnablePassthrough
from langchain_core.output_parsers import StrOutputParser
import os
from werkzeug.utils import secure_filename
from pptx import Presentation  # For PPTX files
from docx import Document  # For DOCX files

app = Flask(__name__)
CORS(app, origins=["http://localhost:3000"])  # Allow requests from your React frontend

# Configuration for file uploads
UPLOAD_FOLDER = "user_uploads"
ALLOWED_EXTENSIONS = {"pdf", "pptx", "docx"}  # Added support for PPT and DOCX
app.config["UPLOAD_FOLDER"] = UPLOAD_FOLDER

# Ensure the upload folder exists
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# Helper functions to load PPT and DOCX files
def load_pptx(file_path):
    """Load text from a PowerPoint (.pptx) file."""
    presentation = Presentation(file_path)
    text = ""
    for slide in presentation.slides:
        for shape in slide.shapes:
            if hasattr(shape, "text"):
                text += shape.text + "\n"
    return text

def load_docx(file_path):
    """Load text from a Word (.docx) file."""
    doc = Document(file_path)
    text = ""
    for paragraph in doc.paragraphs:
        text += paragraph.text + "\n"
    return text

# Load and process documents
def load_and_process_documents(data_path, index_path="faiss_index", is_directory=True):
    try:
        if os.path.exists(index_path):
            # Load existing FAISS index
            vector_db = FAISS.load_local(index_path, OllamaEmbeddings(model="nomic-embed-text"), allow_dangerous_deserialization=True)
            print("Loaded existing FAISS index")
        else:
            documents = []
            if is_directory:
                # Load all files in the directory
                for filename in os.listdir(data_path):
                    file_path = os.path.join(data_path, filename)
                    if filename.endswith(".pdf"):
                        loader = PyPDFLoader(file_path)
                        documents.extend(loader.load())
                    elif filename.endswith(".pptx"):
                        text = load_pptx(file_path)
                        documents.append({"page_content": text, "metadata": {"source": file_path}})
                    elif filename.endswith(".docx"):
                        text = load_docx(file_path)
                        documents.append({"page_content": text, "metadata": {"source": file_path}})
            else:
                # Load a single file
                if data_path.endswith(".pdf"):
                    loader = PyPDFLoader(data_path)
                    documents = loader.load()
                elif data_path.endswith(".pptx"):
                    text = load_pptx(data_path)
                    documents.append({"page_content": text, "metadata": {"source": data_path}})
                elif data_path.endswith(".docx"):
                    text = load_docx(data_path)
                    documents.append({"page_content": text, "metadata": {"source": data_path}})
            
            print(f"Loaded {len(documents)} documents")
            
            # Split text into chunks
            text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
            chunks = text_splitter.split_documents(documents)
            print(f"Text split into {len(chunks)} chunks")
            
            # Create FAISS vector database
            vector_db = FAISS.from_documents(
                documents=chunks,
                embedding=OllamaEmbeddings(model="nomic-embed-text")
            )
            # Save the FAISS index
            vector_db.save_local(index_path)
            print("FAISS vector database created and saved successfully")
        
        return vector_db
    except Exception as e:
        print(f"Error in load_and_process_documents: {e}")
        raise

# Set up LLM and retrieval
local_model = "llama3.2"  
llm = ChatOllama(model=local_model)

# Query prompt template
QUERY_PROMPT = PromptTemplate(
    input_variables=["question"],
    template="""You are an AI language model assistant. Your task is to generate 2
    different versions of the given user question to retrieve relevant documents from
    a vector database. By generating multiple perspectives on the user question, your
    goal is to help the user overcome some of the limitations of the distance-based
    similarity search. Provide these alternative questions separated by newlines.
    Original question: {question}""",
)

# Define the prompt template
# Define the prompt template
template = """Some points to note while generating an answer:
a) Be courteous and creative in your responses. Answer like you are a friendly agent, making the user feel comfortable.
a.1) Imagine yourself as an intelligent assistant which is helping users with different types of study materials. You will have a knowledge base of study materials to search on.
b) Be very structured in your response. Provide the response with HTML tags as explained below:
- Use <b> tags to bold important words.
- Use <br> tags to display contents in new lines wherever required for clear displaying.
- Use <ul> and <li> tags for bullet points.
- Use <p> tags for paragraphs.
Important Note: We need to display the content with proper HTML tags. Your task is to automatically add the relevant <li>, <ul>, <br>, <p>, and <b> tags to beautifully present the responses to be displayed in an HTML <div> tag.
c) The answer should not be in the email format and should look like a normal chat.

Context:
{context}

Question: {question}

Answer:
Please provide the answer in a clear, point-wise format for better readability:
1. ...
2. ...
3. ...
"""
prompt = ChatPromptTemplate.from_template(template)
print("Prompt work successfully")

# Load system documents and create vector database
try:
    system_vector_db = load_and_process_documents("Data/", index_path="system_faiss_index", is_directory=True)
except Exception as e:
    print(f"Failed to load and process system documents: {e}")
    system_vector_db = None

# Global retriever and chain for system PDFs
system_retriever = None
system_chain = None

if system_vector_db:
    system_retriever = MultiQueryRetriever.from_llm(
        system_vector_db.as_retriever(), 
        llm,
        prompt=QUERY_PROMPT
    )
    system_chain = (
        {"context": system_retriever, "question": RunnablePassthrough()}
        | prompt
        | llm
        | StrOutputParser()
    )

# Global retriever and chain for user-uploaded files
user_vector_db = None
user_retriever = None
user_chain = None

# Root route
@app.route('/')
def home():
    return "Welcome to the PDF Chatbot API! Use the /upload endpoint to upload a file and the /chat endpoint to interact with the chatbot."

# File upload route
@app.route('/upload', methods=['POST'])
def upload_file():
    """
    Upload a file (PDF, PPT, or DOCX) and process it for the chatbot.
    """
    global user_vector_db, user_retriever, user_chain
    
    if "file" not in request.files:
        return jsonify({"error": "No file part"}), 400
    
    file = request.files["file"]
    if file.filename == "":
        return jsonify({"error": "No selected file"}), 400
    
    if file and file.filename.endswith(tuple(ALLOWED_EXTENSIONS)):
        filename = secure_filename(file.filename)
        file_path = os.path.join(app.config["UPLOAD_FOLDER"], filename)
        file.save(file_path)
        
        try:
            # Process the uploaded file (single file, not a directory)
            user_vector_db = load_and_process_documents(file_path, index_path="user_faiss_index", is_directory=False)
            
            # Set up retriever
            user_retriever = MultiQueryRetriever.from_llm(
                user_vector_db.as_retriever(), 
                llm,
                prompt=QUERY_PROMPT
            )
            
            # Create chain
            user_chain = (
                {"context": user_retriever, "question": RunnablePassthrough()}
                | prompt
                | llm
                | StrOutputParser()
            )
            
            return jsonify({"message": "File uploaded and processed successfully"}), 200
        except Exception as e:
            return jsonify({"error": f"Failed to process the file: {e}"}), 500
    else:
        return jsonify({"error": "Invalid file type. Only PDF, PPT, and DOCX files are allowed"}), 400

# Chat route
@app.route('/chat', methods=['POST'])
def chat_with_file():
    """
    Chat with the uploaded file (PDF, PPT, or DOCX) using the RAG chain.
    """
    global system_chain, user_chain
    
    data = request.json
    question = data.get('question')
    use_user_file = data.get('use_user_file', False)  # Flag to determine which file to use
    
    if not question:
        return jsonify({"error": "No question provided"}), 400
    
    if use_user_file:
        if not user_chain:
            return jsonify({"error": "No file uploaded. Please upload a file first."}), 400
        chain = user_chain
    else:
        if not system_chain:
            return jsonify({"error": "System files not initialized. Check document loading and retriever setup."}), 500
        chain = system_chain
    
    try:
        response = chain.invoke(question)
        return jsonify({"response": response})
    except Exception as e:
        print(f"Error in chain invocation: {e}")
        return jsonify({"error": "Failed to generate response"}), 500

if __name__ == '__main__':
    app.run(debug=True, port=8080)